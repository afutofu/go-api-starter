openapi: 3.0.0
info:
  title: Todo & Authentication API
  version: 1.0.0
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Bad request
        "500":
          description: Internal server error
  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Login successful
          headers:
            Set-Cookie:
              description: JWT token set in a cookie
              schema:
                type: string
        "400":
          description: Bad request
        "401":
          description: Invalid credentials
        "500":
          description: Internal server error
  /logout:
    post:
      summary: User logout
      responses:
        "200":
          description: Logout successful
          headers:
            Set-Cookie:
              description: JWT token cleared
              schema:
                type: string
        "500":
          description: Internal server error
  /todos:
    get:
      summary: Get all todos
      responses:
        "200":
          description: A list of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Todo"
    post:
      summary: Create a new todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
      responses:
        "201":
          description: Todo created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
  /todos/{id}:
    get:
      summary: Get a todo by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A todo item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "404":
          description: Todo not found
    put:
      summary: Update a todo by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
      responses:
        "200":
          description: Todo updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "404":
          description: Todo not found
    delete:
      summary: Delete a todo by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Todo deleted
        "404":
          description: Todo not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          example: testuser
        password:
          type: string
          example: password123
      required:
        - username
        - password
    Todo:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
          example: Buy milk
        completed:
          type: boolean
          example: false
      required:
        - text
        - completed
